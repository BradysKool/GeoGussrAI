Day 1: Made a function to take a full image screenshot of the location. I worked on a way to verify if a guess was correct or not with OCR.

Day 2: I finished determining a way to confirm the correct county for the location. I also started to create reward functions and made a function to check if the guess was in the correct continent as well as to check if the correct county is bordering the guess.

Day 3: Started to work on a function for AI to put in guesses. This is gonna take a whileâ€¦

Day 4: Finished function for AI to put in its guess. Just collected the exact coordinates for each country that appeared on the screen

Day 5: I spent the day testing all of the functions I made to make sure there will be no problems down the road. Also researched ways to make the model and decided to start building it in tensorflow. I soon ran into problems with Cuda compatibility so decided to scrap it and start using Pytorch instead

Day 6: Wrote code for the RL model in Pytorch taking inspiration from one of my previous problems and spent some time relearning the framework a little. Ran into some issues with the dimensions of the weights of the models in my torchModle.py file. Spent around 30 minutes debugging and finally realising that I miscalculated the final dimensions of the image. After that I tested the script and immediately ran into an issue of the model trying to evaluate the prediction before the model even guessed the country. Will try to make checkmarks to make sure the function is fully completed before running the rest of the script.

Day 7:  Fixed issue of one function running before I wanted it with some simple time.weights. Debugged some more errors around how the script guesses. Debugged some errors with the backpropagation- I overused with torch.no_grad(). I was able to get the entire script working so will run it overnight training it on 3,000 locations may be too small but we will see. A few guesses into the training it seems to have broke down and I will fix it tomorrow.

Day 8:  I discovered that if the game broke I forgot to have a check that will press play again to get a new location. The biggest error was that if the name of the country was more than one word like "New Zealand" it was unable to get the name. This second error ended up being very hard to solve and I was unable to solve it today. I will try again tomorrow. During this I also found that I was missing a few countries in my country list so had to go back and update that in all of the places.

Day 9: Starting working on the errors I identified in Day 8. Finished that function after 2 hours as I had to rewrite the whole function in a completely different way. Ran through 100 iterations of the training and made a few tweaks to the error handling but overall it worked quite well. I made a testing function so that I could import the trained model and use it to make a guess on locations. I made some final touches on the script. The model trained for an hour or two but stopped as it was only guessing one country and no longer learning.  I will update this algo tomorrow so that it uses a different function to promote learning at the start of the training.

Day 10: When testing my algorithm I realized that it was just guessing India every single time. This is probably due to the lack of training data and huge complexity of the task. Because I do not have the time and resources to train a huge amount of data I will instead fine tune a pre-made model. I spent the rest of my time today reading up on different pre-trained models as well as how to implement them.

Day 11: I chose to use the CLIP (Contrastive Language-Image Pre-training) pretrained model and fine tune it to this case. I worked on how to process the image so that it will be able to be used by the model as well. Because CLIP is mostly used to compare large amounts of photos in a data set, I learned that I will have to manually add a final layer to the CLIP model so that I can train it.
        
Day 12: I spent the beginning of today finishing the implementation of the CLIP pretrained model. I then started to train it but I was still running into the same problem where the model would only guess 1 country the whole time. To combat this I looked into different reward systems and loss algorithms. I learned about using a baseline with the reward to increase more stability in the algorithm so it does not converge to one country. I also worked on making a function that calculates the distance based on pixels from the country I guessed and the correct country so that I can use this for a better reward function.
        
Day 13: I finished the distance function and started training. I still ran into the same issue of only guessing the same country every time and then I finally remembered that I need to allow for exploration at the very start. To do this I implemented a temperature system so that there is a lot of exploration at the start so it will be able to learn. I started training again but then I ran into an issue of not being able to use my geogussr account any more, I think i got blocked

Day 14: Because I can no longer train on GeoGuessr I am going to try to obtain a premade data set of street view photos and the country they were taking in. I spent the rest of the day downloading the dataset and implementing it. I decided to train the model overnight with 1/4th an epoch which is expected to take about 10 hours.

Day 15:  I came back and the training seemed to work now, so I will test it with real locations. After some testing,I can say it's working perfectly and performing way better than I thought it would!

Day 16: I did some more testing and even did a 1v1 against my model to collect some data on how it performs in GeoGuessr. For the 1v1 competition, the bot and I were both given 100 still images, and whoever could guess the most correct countries out of the 100 would win. After the first 1v1 Brady: 37, geoBot: 31. It was a very close score but to achieve my goal I will train it again tonight with 1/2 epoch (about 20 hours) to hopefully improve and beat me tomorrow.

Day 17:  After 20 hours of training, I tested the model and it beat my score!
